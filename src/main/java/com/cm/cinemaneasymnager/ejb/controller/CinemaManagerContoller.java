package com.cm.cinemaneasymnager.ejb.controller;

import com.cm.cinemaneasymnager.ejb.entity.Configuration;
import com.cm.cinemaneasymnager.ejb.entity.Film;
import com.cm.cinemaneasymnager.ejb.entity.Giorni;
import com.cm.cinemaneasymnager.ejb.entity.Orario;
import com.cm.cinemaneasymnager.ejb.repository.GiorniRepository;
import com.cm.cinemaneasymnager.ejb.services.ConfigurationServices;
import com.cm.cinemaneasymnager.ejb.services.FilmServices;
import com.cm.cinemaneasymnager.ejb.services.GiorniServices;
import com.cm.cinemaneasymnager.ejb.services.OrarioServices;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.Optional;

@Controller
@RequestMapping(path="/")
public class CinemaManagerContoller {

    @Qualifier("filmServices")
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FilmServices filmServices;
    @Qualifier("giorniServices")
    @Autowired
    private GiorniServices giorniServices;
    @Qualifier("orarioServices")
    @Autowired
    private OrarioServices orarioServices;

    private ConfigurationServices configuartionServices;


    @PostMapping (path="/add") // Map ONLY GET Requests
    public @ResponseBody
    Film addNewFilm (@RequestParam Film film) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Film f = filmServices.saveFilm(film);


        return f;
    }

    @GetMapping(path="/films")

    public @ResponseBody Iterable<Film> getAllFilms() {
        // This returns a JSON or XML with the users
        return filmServices.getAllFilm();
    }
    @GetMapping(path="/film{id}")
    public @ResponseBody    Optional<Film> getFilm(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        return filmServices.getFilm(id);
    }
    @PostMapping(path="/delete/film{id}")
    public @ResponseBody  Integer   deleteFilm(@PathVariable Integer id) {

        filmServices.deleteFilm(id);

       // TODO devo tornare se la cancellazione Ã¨ andata bene
        return 1;
    }


    @GetMapping(path="/gionri")
    public @ResponseBody    Iterable<Giorni> getAllGiorni() {
        // This returns a JSON or XML with the users
        return giorniServices.getAllGiorni();
    }

    @PostMapping(path = "/update/film")
    public @ResponseBody Film updateFilm(@RequestParam Film film){
        return filmServices.updateFilmById(film);
    }


    @GetMapping(path = "/filmByDay{firstDate}{secondDate}")
    public @ResponseBody Iterable<Film> getFilmsByDay(@PathVariable Date firstDate, @PathVariable Date secondDate){
        return filmServices.getFilmsByDay(firstDate,secondDate);
    }


    @GetMapping(path = "/orari")
    public @ResponseBody Iterable<Orario> getAllOrario(){
        return orarioServices.getAllOrario();
    }


}
